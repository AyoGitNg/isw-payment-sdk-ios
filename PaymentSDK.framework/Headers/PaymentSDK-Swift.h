// Generated by Apple Swift version 2.0 (swiftlang-700.0.59 clang-700.0.72)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC10PaymentSDK11AccessToken")
@interface AccessToken : NSObject
@property (nonatomic, copy) NSString * __nullable token;
@property (nonatomic, copy) NSString * __nullable type;
@property (nonatomic, copy) NSString * __nullable scope;
@property (nonatomic, copy) NSString * __nullable firstName;
@property (nonatomic, copy) NSString * __nullable lastName;
@property (nonatomic, copy) NSString * __nullable mobileNo;
@property (nonatomic, copy) NSString * __nullable email;
@property (nonatomic, copy) NSString * __nullable jti;
@end

@class NSError;

SWIFT_CLASS("_TtC10PaymentSDK19AccessTokenResponse")
@interface AccessTokenResponse : NSObject
@property (nonatomic, readonly) AccessToken * __nullable accessToken;
@property (nonatomic, readonly) NSError * __nullable error;
- (nonnull instancetype)initWithAccessToken:(AccessToken * __nullable)accessToken error:(NSError * __nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

enum Algorithm : NSInteger;

SWIFT_CLASS("_TtC10PaymentSDK10AuthConfig")
@interface AuthConfig : NSObject
- (int64_t)getTimestamp;
- (NSString * __nonnull)getNonce;
- (enum Algorithm)getCrypto;
- (NSString * __nonnull)getAuthorization;
- (NSString * __nonnull)getSignature;
@end

typedef SWIFT_ENUM(NSInteger, Algorithm) {
  AlgorithmSHA1 = 0,
  AlgorithmSHA256 = 1,
  AlgorithmSHA512 = 2,
};

typedef SWIFT_ENUM(NSInteger, AuthMethod) {
  AuthMethodCLIENT = 0,
  AuthMethodPASSPORT = 1,
  AuthMethodPASSWORD = 2,
};


SWIFT_CLASS("_TtC10PaymentSDK19AuthorizeOtpRequest")
@interface AuthorizeOtpRequest : NSObject
- (nonnull instancetype)initWithOtpTransactionIdentifier:(NSString * __nonnull)otpTransactionIdentifier otp:(NSString * __nonnull)otp transactionRef:(NSString * __nonnull)transactionRef OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PaymentSDK20AuthorizeOtpResponse")
@interface AuthorizeOtpResponse : NSObject
@property (nonatomic, copy) NSString * __nonnull transactionRef;
@end

typedef SWIFT_ENUM(NSInteger, HttpMethod) {
  HttpMethodDELETE = 0,
  HttpMethodGET = 1,
  HttpMethodJSON_POST = 2,
  HttpMethodPOST = 3,
  HttpMethodPUT = 4,
};


SWIFT_CLASS("_TtC10PaymentSDK8Passport")
@interface Passport : NSObject
+ (NSString * __nonnull)liveApiBase;
- (nonnull instancetype)initWithClientId:(NSString * __nonnull)clientId clientSecret:(NSString * __nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;

/// <ul><li>(FOR TESTING ONLY) If you'd like your API requests to hit your own</li><li>(mocked) server, you can set this up here by overriding the base api URL.</li></ul>
+ (void)overrideApiBase:(NSString * __nonnull)overriddenApiBase;
+ (NSString * __nonnull)getApiBase;
- (void)getAccessToken:(void (^ __nonnull)(AccessToken * __nullable, NSError * __nullable))completionHandler;
- (void)userLogin:(NSString * __nonnull)username password:(NSString * __nonnull)password completionHandler:(void (^ __nonnull)(AccessToken * __nullable, NSError * __nullable))completionHandler;
- (void)getUserAccessToken:(NSString * __nonnull)accessCode redirectUri:(NSString * __nonnull)redirectUri completionHandler:(void (^ __nonnull)(AccessToken * __nullable, NSError * __nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10PaymentSDK7Payment")
@interface Payment : NSObject
+ (NSString * __nonnull)liveApiBase;

/// <ul><li>(FOR TESTING ONLY) If you'd like your API requests to hit your own</li><li>(mocked) server, you can set this up here by overriding the base api URL.</li></ul>
+ (void)overrideApiBase:(NSString * __nonnull)overriddenApiBase;
+ (NSString * __nonnull)getApiBase;
+ (NSString * __nonnull)formatAuthData:(NSString * __nonnull)pan pin:(NSString * __nonnull)pin expiryDate:(NSString * __nonnull)expiryDate cvv2:(NSString * __nonnull)cvv2;
+ (NSString * __nonnull)randomStringWithLength:(NSInteger)len;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PaymentSDK13PaymentMethod")
@interface PaymentMethod : NSObject
@property (nonatomic, copy) NSString * __nonnull token;
@property (nonatomic, copy) NSString * __nonnull tokenExpiry;
@property (nonatomic, copy) NSString * __nonnull panLast4Digits;
@property (nonatomic, copy) NSString * __nonnull cardProduct;
@end

@class NSDate;

SWIFT_CLASS("_TtC10PaymentSDK21PaymentStatusResponse")
@interface PaymentStatusResponse : NSObject
@property (nonatomic, copy) NSString * __nonnull message;
@property (nonatomic, copy) NSString * __nonnull transactionRef;
@property (nonatomic, copy) NSString * __nonnull amount;
@property (nonatomic) NSDate * __nonnull transactionDate;
@property (nonatomic, copy) NSString * __nonnull panLast4Digits;
@end


SWIFT_CLASS("_TtC10PaymentSDK15PurchaseRequest")
@interface PurchaseRequest : NSObject
- (nonnull instancetype)initWithCustomerId:(NSString * __nullable)customerId amount:(NSString * __nonnull)amount pan:(NSString * __nonnull)pan pin:(NSString * __nonnull)pin expiryDate:(NSString * __nonnull)expiryDate cvv2:(NSString * __nonnull)cvv2 transactionRef:(NSString * __nonnull)transactionRef currency:(NSString * __nonnull)currency requestorId:(NSString * __nullable)requestorId OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PaymentSDK16PurchaseResponse")
@interface PurchaseResponse : NSObject
@property (nonatomic, copy) NSString * __nonnull transactionIdentifier;
@property (nonatomic, copy) NSString * __nonnull message;
@property (nonatomic, copy) NSString * __nonnull transactionRef;
@property (nonatomic, copy) NSString * __nonnull amount;
@property (nonatomic, copy) NSString * __nullable token;
@property (nonatomic, copy) NSString * __nullable tokenExpiryDate;
@property (nonatomic, copy) NSString * __nullable panLast4Digits;
@property (nonatomic, copy) NSString * __nullable otpTransactionIdentifier;
@end


SWIFT_CLASS("_TtC10PaymentSDK14WalletResponse")
@interface WalletResponse : NSObject
@property (nonatomic, copy) NSString * __nonnull transactionRef;
@property (nonatomic, copy) NSArray<PaymentMethod *> * __nonnull paymentMethods;
@end

@class NSCoder;
@class UIWebView;
@class NSURLRequest;

SWIFT_CLASS("_TtC10PaymentSDK17WebViewController")
@interface WebViewController : UIViewController <UIWebViewDelegate>
- (nonnull instancetype)initWithClientId:(NSString * __nonnull)clientId completion:(void (^ __nonnull)(NSString * __nullable, NSError * __nullable))completion OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (BOOL)webView:(UIWebView * __nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * __nonnull)request navigationType:(UIWebViewNavigationType)navigationType;
- (void)viewDidLayoutSubviews;
- (void)didReceiveMemoryWarning;
- (void)handle;
@end

#pragma clang diagnostic pop
